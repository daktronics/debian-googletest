Source: googletest
Homepage: https://github.com/google/googletest
Section: devel
Maintainer: Steve M. Robbins <smr@debian.org>
Uploaders: Giuseppe Iuculano <iuculano@debian.org>, Fredrik Hallenberg <hallon@debian.org>
Priority: optional
Build-Depends: debhelper (>= 9), cmake, python
Standards-Version: 3.9.8
Vcs-Git: git://anonscm.debian.org/collab-maint/gtest.git
Vcs-Browser: https://anonscm.debian.org/gitweb/?p=collab-maint/gtest.git

Package: googletest
Architecture: any
Multi-Arch: same
Section: libdevel
Depends: ${shlibs:Depends}, ${misc:Depends}, python:any
Conflicts: libgtest-dev (<< 1.8.0), google-mock (<< 1.8.0)
Replaces: libgtest-dev (<< 1.8.0), google-mock (<< 1.8.0)
Description: Google's C++ test framework
 This package combines formerly-separate Google Test and Google Mock.
 .
 Google Test is a framework for writing C++ tests on a variety of
 platforms. Based on the xUnit architecture. Supports automatic test
 discovery, a rich set of assertions, user-defined assertions, death
 tests, fatal and non-fatal failures, value- and type-parameterized
 tests, various options for running the tests, and XML test report
 generation.
 .
 Google Mock is an extension of Google Test for C++ mocking.  Inspired
 by jMock, EasyMock, and Hamcrest, and designed with C++'s specifics
 in mind, it can help you derive better designs of your system and
 write better tests.
 .
 Google Mock:
 .
  - provides a declarative syntax for defining mocks,
  - can easily define partial (hybrid) mocks, which are a cross of real
    and mock objects,
  - handles functions of arbitrary types and overloaded functions,
  - comes with a rich set of matchers for validating function arguments,
  - uses an intuitive syntax for controlling the behavior of a mock,
  - does automatic verification of expectations (no record-and-replay
    needed),
  - allows arbitrary (partial) ordering constraints on
    function calls to be expressed,
  - lets a user extend it by defining new matchers and actions.
  - does not use exceptions, and
  - is easy to learn and use.
 .
 NOTE: This package does not contain a library to link against, but rather
 the source code to build the google test library; this is because the google
 test library must be built with the same flags as the C++ code under test.

Package: libgtest-dev
Architecture: any
Multi-Arch: same
Section: oldlibs
Priority: extra
Depends: ${misc:Depends}, googletest (= ${binary:Version})
Description: Google's framework for writing C++ tests [source code]
 NOTE: This is a transitional package, retained for backwards compatibility.
 New code should use package googletest instead.
 .
 Google's framework for writing C++ tests on a variety of platforms. Based on
 the xUnit architecture. Supports automatic test discovery, a rich set of
 assertions, user-defined assertions, death tests, fatal and non-fatal failures,
 value- and type-parameterized tests, various options for running the tests, and
 XML test report generation.

Package: google-mock
Architecture: any
Multi-Arch: same
Section: oldlibs
Priority: extra
Depends: ${misc:Depends}, googletest (= ${binary:Version})
Description: Google's framework for writing and using C++ mock classes
 NOTE: This is a transitional package, retained for backwards compatibility.
 New code should use package googletest instead.
 .
 Inspired by jMock, EasyMock, and Hamcrest, and designed with C++'s 
 specifics in mind, it can help you derive better designs of your 
 system and write better tests.
 .
 Google Mock:
 .
  - provides a declarative syntax for defining mocks,
  - can easily define partial (hybrid) mocks, which are a cross of real
    and mock objects,
  - handles functions of arbitrary types and overloaded functions,
  - comes with a rich set of matchers for validating function arguments,
  - uses an intuitive syntax for controlling the behavior of a mock,
  - does automatic verification of expectations (no record-and-replay
    needed),
  - allows arbitrary (partial) ordering constraints on
    function calls to be expressed,
  - lets a user extend it by defining new matchers and actions.
  - does not use exceptions, and
  - is easy to learn and use.
