Source: googletest
Homepage: http://code.google.com/p/googletest/
Section: devel
Maintainer: Steve M. Robbins <smr@debian.org>
Uploaders: Steve M. Robbins <smr@debian.org>, Giuseppe Iuculano <iuculano@debian.org>, Fredrik Hallenberg <hallon@debian.org>
Priority: optional
Build-Depends: debhelper (>= 9), cmake, python
Standards-Version: 3.9.5
Vcs-Git: git://git.debian.org/git/collab-maint/gtest.git
Vcs-Browser: http://git.debian.org/?p=collab-maint/gtest.git

Package: libgtest-dev
Architecture: any
Multi-Arch: same
Section: libdevel
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: Google's framework for writing C++ tests - header files
 Google's framework for writing C++ tests on a variety of platforms. Based on
 the xUnit architecture. Supports automatic test discovery, a rich set of
 assertions, user-defined assertions, death tests, fatal and non-fatal failures,
 value- and type-parameterized tests, various options for running the tests, and
 XML test report generation.
 .
 This package contains the header files needed to link programs against
 gtest.

Package: google-mock
Architecture: any
Multi-Arch: same
Depends: ${misc:Depends}, python:any, libgtest-dev (= ${binary:Version})
Description: Google's framework for writing and using C++ mock classes
 Inspired by jMock, EasyMock, and Hamcrest, and designed with C++'s 
 specifics in mind, it can help you derive better designs of your 
 system and write better tests.
 .
 Google Mock:
 .
  - provides a declarative syntax for defining mocks,
  - can easily define partial (hybrid) mocks, which are a cross of real
    and mock objects,
  - handles functions of arbitrary types and overloaded functions,
  - comes with a rich set of matchers for validating function arguments,
  - uses an intuitive syntax for controlling the behavior of a mock,
  - does automatic verification of expectations (no record-and-replay
    needed),
  - allows arbitrary (partial) ordering constraints on
    function calls to be expressed,
  - lets a user extend it by defining new matchers and actions.
  - does not use exceptions, and
  - is easy to learn and use.
